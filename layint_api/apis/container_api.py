# coding: utf-8

"""
    Layered Insight Assessment, Compliance, Witness & Control

    LI Assessment & Compliance performs static vulnerability analysis, license and package compliance. LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.10
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ContainerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def assign_configuration_to_container(self, container_id, config_id, **kwargs):
        """
        Assign configuration to a container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_configuration_to_container(container_id, config_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to assign configuration to (required)
        :param str config_id: hexadecimal ID of configuration (required)
        :return: Container
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.assign_configuration_to_container_with_http_info(container_id, config_id, **kwargs)
        else:
            (data) = self.assign_configuration_to_container_with_http_info(container_id, config_id, **kwargs)
            return data

    def assign_configuration_to_container_with_http_info(self, container_id, config_id, **kwargs):
        """
        Assign configuration to a container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_configuration_to_container_with_http_info(container_id, config_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to assign configuration to (required)
        :param str config_id: hexadecimal ID of configuration (required)
        :return: Container
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'config_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_configuration_to_container" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `assign_configuration_to_container`")
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params) or (params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `assign_configuration_to_container`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']
        if 'config_id' in params:
            path_params['configID'] = params['config_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/Configs/{configID}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Container',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def build_container_dossier_tempate(self, container_id, **kwargs):
        """
        Builds a security policy based on containers behavior
        This call builds a new custom security policy based on the recorded activities of the container.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.build_container_dossier_tempate(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to gather dossier for (required)
        :param str merge_policy_id: hexadecimal ID of policy to merge gathered dossier rules
        :param str log_action: action string to match action type in log for gathered dossier rules
        :return: DossierTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.build_container_dossier_tempate_with_http_info(container_id, **kwargs)
        else:
            (data) = self.build_container_dossier_tempate_with_http_info(container_id, **kwargs)
            return data

    def build_container_dossier_tempate_with_http_info(self, container_id, **kwargs):
        """
        Builds a security policy based on containers behavior
        This call builds a new custom security policy based on the recorded activities of the container.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.build_container_dossier_tempate_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to gather dossier for (required)
        :param str merge_policy_id: hexadecimal ID of policy to merge gathered dossier rules
        :param str log_action: action string to match action type in log for gathered dossier rules
        :return: DossierTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'merge_policy_id', 'log_action']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method build_container_dossier_tempate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `build_container_dossier_tempate`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []
        if 'merge_policy_id' in params:
            query_params.append(('mergePolicyID', params['merge_policy_id']))
        if 'log_action' in params:
            query_params.append(('logAction', params['log_action']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/DossierTemplate', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DossierTemplateResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_container(self, container_id, **kwargs):
        """
        Delete a container
        Delete a container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_container(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_container_with_http_info(container_id, **kwargs)
        else:
            (data) = self.delete_container_with_http_info(container_id, **kwargs)
            return data

    def delete_container_with_http_info(self, container_id, **kwargs):
        """
        Delete a container
        Delete a container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_container_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_container" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `delete_container`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def dropped_logs_of_container(self, container_id, starting_time, **kwargs):
        """
        Generates data used for UI
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dropped_logs_of_container(container_id, starting_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get data from (required)
        :param str starting_time: specify the from what date to get data (required)
        :return: DroppedLogsOfContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.dropped_logs_of_container_with_http_info(container_id, starting_time, **kwargs)
        else:
            (data) = self.dropped_logs_of_container_with_http_info(container_id, starting_time, **kwargs)
            return data

    def dropped_logs_of_container_with_http_info(self, container_id, starting_time, **kwargs):
        """
        Generates data used for UI
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dropped_logs_of_container_with_http_info(container_id, starting_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get data from (required)
        :param str starting_time: specify the from what date to get data (required)
        :return: DroppedLogsOfContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'starting_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dropped_logs_of_container" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `dropped_logs_of_container`")
        # verify the required parameter 'starting_time' is set
        if ('starting_time' not in params) or (params['starting_time'] is None):
            raise ValueError("Missing the required parameter `starting_time` when calling `dropped_logs_of_container`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []
        if 'starting_time' in params:
            query_params.append(('StartingTime', params['starting_time']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/DroppedLogsOfContainer', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DroppedLogsOfContainer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edit_container(self, container_id, **kwargs):
        """
        Edit a container
        Edit a container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_container(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get (required)
        :param Container container:
        :return: Container
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edit_container_with_http_info(container_id, **kwargs)
        else:
            (data) = self.edit_container_with_http_info(container_id, **kwargs)
            return data

    def edit_container_with_http_info(self, container_id, **kwargs):
        """
        Edit a container
        Edit a container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_container_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get (required)
        :param Container container:
        :return: Container
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'container']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_container" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `edit_container`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'container' in params:
            body_params = params['container']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Container',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def five_most_divergent_containers(self, **kwargs):
        """
        Return a list with the top five alert triggering containers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.five_most_divergent_containers(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Containers]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.five_most_divergent_containers_with_http_info(**kwargs)
        else:
            (data) = self.five_most_divergent_containers_with_http_info(**kwargs)
            return data

    def five_most_divergent_containers_with_http_info(self, **kwargs):
        """
        Return a list with the top five alert triggering containers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.five_most_divergent_containers_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Containers]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method five_most_divergent_containers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/ContainersFiveMostDivergent', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Containers]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def function_metrics(self, container_id, starting_time, ending_time, seconds_per_interval, **kwargs):
        """
        Get occurance of system calls in time
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.function_metrics(container_id, starting_time, ending_time, seconds_per_interval, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get system call matrices from (required)
        :param str starting_time: Date from when to get data (required)
        :param str ending_time: End date for data to get (required)
        :param str seconds_per_interval: Resolution for output (required)
        :param str system_call: Specify a system call to get data for
        :param str language: Get calls for a given language
        :return: ContainerSystemcallMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.function_metrics_with_http_info(container_id, starting_time, ending_time, seconds_per_interval, **kwargs)
        else:
            (data) = self.function_metrics_with_http_info(container_id, starting_time, ending_time, seconds_per_interval, **kwargs)
            return data

    def function_metrics_with_http_info(self, container_id, starting_time, ending_time, seconds_per_interval, **kwargs):
        """
        Get occurance of system calls in time
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.function_metrics_with_http_info(container_id, starting_time, ending_time, seconds_per_interval, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get system call matrices from (required)
        :param str starting_time: Date from when to get data (required)
        :param str ending_time: End date for data to get (required)
        :param str seconds_per_interval: Resolution for output (required)
        :param str system_call: Specify a system call to get data for
        :param str language: Get calls for a given language
        :return: ContainerSystemcallMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'starting_time', 'ending_time', 'seconds_per_interval', 'system_call', 'language']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method function_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `function_metrics`")
        # verify the required parameter 'starting_time' is set
        if ('starting_time' not in params) or (params['starting_time'] is None):
            raise ValueError("Missing the required parameter `starting_time` when calling `function_metrics`")
        # verify the required parameter 'ending_time' is set
        if ('ending_time' not in params) or (params['ending_time'] is None):
            raise ValueError("Missing the required parameter `ending_time` when calling `function_metrics`")
        # verify the required parameter 'seconds_per_interval' is set
        if ('seconds_per_interval' not in params) or (params['seconds_per_interval'] is None):
            raise ValueError("Missing the required parameter `seconds_per_interval` when calling `function_metrics`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []
        if 'starting_time' in params:
            query_params.append(('StartingTime', params['starting_time']))
        if 'ending_time' in params:
            query_params.append(('EndingTime', params['ending_time']))
        if 'seconds_per_interval' in params:
            query_params.append(('SecondsPerInterval', params['seconds_per_interval']))
        if 'system_call' in params:
            query_params.append(('SystemCall', params['system_call']))
        if 'language' in params:
            query_params.append(('Language', params['language']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/FunctionMetrics', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ContainerSystemcallMetrics',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def functions(self, container_id, **kwargs):
        """
        Get a list of system calls a container has made
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.functions(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get system call from (required)
        :param str starting_time: Date from when to get data
        :param str system_call: Get a systemcall by number
        :param str language: Get calls for a given language
        :return: ContainerSyscalls
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.functions_with_http_info(container_id, **kwargs)
        else:
            (data) = self.functions_with_http_info(container_id, **kwargs)
            return data

    def functions_with_http_info(self, container_id, **kwargs):
        """
        Get a list of system calls a container has made
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.functions_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get system call from (required)
        :param str starting_time: Date from when to get data
        :param str system_call: Get a systemcall by number
        :param str language: Get calls for a given language
        :return: ContainerSyscalls
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'starting_time', 'system_call', 'language']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method functions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `functions`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []
        if 'starting_time' in params:
            query_params.append(('StartingTime', params['starting_time']))
        if 'system_call' in params:
            query_params.append(('SystemCall', params['system_call']))
        if 'language' in params:
            query_params.append(('Language', params['language']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/Functions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ContainerSyscalls',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_agent_config(self, container_id, **kwargs):
        """
        Get the specified container configuration for the LI agent. The configuration consists of agent settings and policy rules.
        Provides the compiled LI agent configuration for the specified container.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_agent_config(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get agent configuration (required)
        :param int log_mode: integer in decimal representation containing LogMode bit flags to set in the  generated agent configuration.  | Log Mode        | Value | Value Hexadecimal | |-----------------|-------|-------------------| | None            | 0     | 0x0| | PolicyAlert     | 1     | 0x1| | PolicyDeny      | 2     | 0x2| | PolicyAlertDeny | 3     | 0x3 (PolicyAlert \\| PolicyDeny)| | PolicyAllow     | 4     | 0x4| | PolicyAll       | 7     | 0x7 (PolicyAlert \\| PolicyDeny \\| PolicyAllow)| | Behavior        | 8     | 0x8   | | All             | 15    | 0xf (PolicyAll \\| Behavior)| 
        :param str arch: architecture to use for the generated agent configuration policy rules
        :param bool raw: response format option for raw format
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_agent_config_with_http_info(container_id, **kwargs)
        else:
            (data) = self.get_agent_config_with_http_info(container_id, **kwargs)
            return data

    def get_agent_config_with_http_info(self, container_id, **kwargs):
        """
        Get the specified container configuration for the LI agent. The configuration consists of agent settings and policy rules.
        Provides the compiled LI agent configuration for the specified container.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_agent_config_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get agent configuration (required)
        :param int log_mode: integer in decimal representation containing LogMode bit flags to set in the  generated agent configuration.  | Log Mode        | Value | Value Hexadecimal | |-----------------|-------|-------------------| | None            | 0     | 0x0| | PolicyAlert     | 1     | 0x1| | PolicyDeny      | 2     | 0x2| | PolicyAlertDeny | 3     | 0x3 (PolicyAlert \\| PolicyDeny)| | PolicyAllow     | 4     | 0x4| | PolicyAll       | 7     | 0x7 (PolicyAlert \\| PolicyDeny \\| PolicyAllow)| | Behavior        | 8     | 0x8   | | All             | 15    | 0xf (PolicyAll \\| Behavior)| 
        :param str arch: architecture to use for the generated agent configuration policy rules
        :param bool raw: response format option for raw format
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'log_mode', 'arch', 'raw']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `get_agent_config`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []
        if 'log_mode' in params:
            query_params.append(('logMode', params['log_mode']))
        if 'arch' in params:
            query_params.append(('arch', params['arch']))
        if 'raw' in params:
            query_params.append(('raw', params['raw']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/AgentConfig', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_container_dossier(self, container_id, **kwargs):
        """
        Gets dossier for container
        This call produces a list of all data Witness has learend about the container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_container_dossier(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to gather dossier for (required)
        :return: Dossier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_container_dossier_with_http_info(container_id, **kwargs)
        else:
            (data) = self.get_container_dossier_with_http_info(container_id, **kwargs)
            return data

    def get_container_dossier_with_http_info(self, container_id, **kwargs):
        """
        Gets dossier for container
        This call produces a list of all data Witness has learend about the container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_container_dossier_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to gather dossier for (required)
        :return: Dossier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_dossier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `get_container_dossier`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/Dossier', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Dossier',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_container_logs(self, container_id, **kwargs):
        """
        Gets behavioral logs for container
        This call produces a list of all behavior logs Witness has received for the container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_container_logs(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to gather logs for (required)
        :param int page_size: Maximum number of log records to return per \"page\" (think pager in a browser)
        :param int page: Page number of results to return. Results will start with record number (Page * PageSize)
        :return: ContainerLogs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_container_logs_with_http_info(container_id, **kwargs)
        else:
            (data) = self.get_container_logs_with_http_info(container_id, **kwargs)
            return data

    def get_container_logs_with_http_info(self, container_id, **kwargs):
        """
        Gets behavioral logs for container
        This call produces a list of all behavior logs Witness has received for the container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_container_logs_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to gather logs for (required)
        :param int page_size: Maximum number of log records to return per \"page\" (think pager in a browser)
        :param int page: Page number of results to return. Results will start with record number (Page * PageSize)
        :return: ContainerLogs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'page_size', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `get_container_logs`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('Page', params['page']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/GetContainerLogs', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ContainerLogs',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_containers(self, **kwargs):
        """
        Get containers
        Returns a list of containers that are accessible to this user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_containers(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Containers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_containers_with_http_info(**kwargs)
        else:
            (data) = self.get_containers_with_http_info(**kwargs)
            return data

    def get_containers_with_http_info(self, **kwargs):
        """
        Get containers
        Returns a list of containers that are accessible to this user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_containers_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Containers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_containers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Containers',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_resource_matrics(self, container_id, **kwargs):
        """
        Get current total container resource usage
        Return resources currently being used in the running container. Resources includes percentage of total of cpu utilization and memory utilization.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_resource_matrics(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get resource usage from (required)
        :return: TotStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_resource_matrics_with_http_info(container_id, **kwargs)
        else:
            (data) = self.get_resource_matrics_with_http_info(container_id, **kwargs)
            return data

    def get_resource_matrics_with_http_info(self, container_id, **kwargs):
        """
        Get current total container resource usage
        Return resources currently being used in the running container. Resources includes percentage of total of cpu utilization and memory utilization.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_resource_matrics_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get resource usage from (required)
        :return: TotStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_matrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `get_resource_matrics`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/ResourceMetrics', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TotStats',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def languages(self, container_id, **kwargs):
        """
        Get information about what languages are running in the container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.languages(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to 'passivate' (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.languages_with_http_info(container_id, **kwargs)
        else:
            (data) = self.languages_with_http_info(container_id, **kwargs)
            return data

    def languages_with_http_info(self, container_id, **kwargs):
        """
        Get information about what languages are running in the container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.languages_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to 'passivate' (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method languages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `languages`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/Languages', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def level_syscall_category_metrics(self, container_id, starting_time, **kwargs):
        """
        Get histograph information for system calls divided into category groups
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.level_syscall_category_metrics(container_id, starting_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get metrics from (required)
        :param str starting_time: Time from when histograph should start (required)
        :param str ending_time: Time from when histograph should end
        :return: LevelSyscallCategoryMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.level_syscall_category_metrics_with_http_info(container_id, starting_time, **kwargs)
        else:
            (data) = self.level_syscall_category_metrics_with_http_info(container_id, starting_time, **kwargs)
            return data

    def level_syscall_category_metrics_with_http_info(self, container_id, starting_time, **kwargs):
        """
        Get histograph information for system calls divided into category groups
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.level_syscall_category_metrics_with_http_info(container_id, starting_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get metrics from (required)
        :param str starting_time: Time from when histograph should start (required)
        :param str ending_time: Time from when histograph should end
        :return: LevelSyscallCategoryMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'starting_time', 'ending_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method level_syscall_category_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `level_syscall_category_metrics`")
        # verify the required parameter 'starting_time' is set
        if ('starting_time' not in params) or (params['starting_time'] is None):
            raise ValueError("Missing the required parameter `starting_time` when calling `level_syscall_category_metrics`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []
        if 'starting_time' in params:
            query_params.append(('StartingTime', params['starting_time']))
        if 'ending_time' in params:
            query_params.append(('EndingTime', params['ending_time']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/LevelSyscallCategoryMetrics', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LevelSyscallCategoryMetrics',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def level_syscall_metrics(self, container_id, starting_time, **kwargs):
        """
        Get histograph information for system calls
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.level_syscall_metrics(container_id, starting_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get metrics from (required)
        :param str starting_time: Time from when histograph should start (required)
        :param str systemcall: Get histograph for specific system call number
        :param str language: Get histograph for specific language
        :param str function_name: Get histograph for specific system call name
        :return: LevelSyscallMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.level_syscall_metrics_with_http_info(container_id, starting_time, **kwargs)
        else:
            (data) = self.level_syscall_metrics_with_http_info(container_id, starting_time, **kwargs)
            return data

    def level_syscall_metrics_with_http_info(self, container_id, starting_time, **kwargs):
        """
        Get histograph information for system calls
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.level_syscall_metrics_with_http_info(container_id, starting_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get metrics from (required)
        :param str starting_time: Time from when histograph should start (required)
        :param str systemcall: Get histograph for specific system call number
        :param str language: Get histograph for specific language
        :param str function_name: Get histograph for specific system call name
        :return: LevelSyscallMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'starting_time', 'systemcall', 'language', 'function_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method level_syscall_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `level_syscall_metrics`")
        # verify the required parameter 'starting_time' is set
        if ('starting_time' not in params) or (params['starting_time'] is None):
            raise ValueError("Missing the required parameter `starting_time` when calling `level_syscall_metrics`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []
        if 'starting_time' in params:
            query_params.append(('StartingTime', params['starting_time']))
        if 'systemcall' in params:
            query_params.append(('Systemcall', params['systemcall']))
        if 'language' in params:
            query_params.append(('Language', params['language']))
        if 'function_name' in params:
            query_params.append(('FunctionName', params['function_name']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/LevelSyscallMetrics', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LevelSyscallMetrics',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def number_of_running_containers(self, **kwargs):
        """
        Get number of containers currently running
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.number_of_running_containers(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.number_of_running_containers_with_http_info(**kwargs)
        else:
            (data) = self.number_of_running_containers_with_http_info(**kwargs)
            return data

    def number_of_running_containers_with_http_info(self, **kwargs):
        """
        Get number of containers currently running
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.number_of_running_containers_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method number_of_running_containers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/ContainersRunning', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='int',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def passivate_container(self, container_id, **kwargs):
        """
        Toggle the container behavior between passive and active
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.passivate_container(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to 'passivate' (required)
        :return: Container
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.passivate_container_with_http_info(container_id, **kwargs)
        else:
            (data) = self.passivate_container_with_http_info(container_id, **kwargs)
            return data

    def passivate_container_with_http_info(self, container_id, **kwargs):
        """
        Toggle the container behavior between passive and active
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.passivate_container_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to 'passivate' (required)
        :return: Container
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method passivate_container" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `passivate_container`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/Passivate', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Container',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_behavioral_logging(self, container_id, **kwargs):
        """
        Toggle behavioral logging on/off
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_behavioral_logging(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to toggle (required)
        :return: BehavioralStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_behavioral_logging_with_http_info(container_id, **kwargs)
        else:
            (data) = self.post_behavioral_logging_with_http_info(container_id, **kwargs)
            return data

    def post_behavioral_logging_with_http_info(self, container_id, **kwargs):
        """
        Toggle behavioral logging on/off
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_behavioral_logging_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to toggle (required)
        :return: BehavioralStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_behavioral_logging" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `post_behavioral_logging`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/BehavioralLogging', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BehavioralStatus',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def seccomp(self, container_id, **kwargs):
        """
        Get a Seccomp profile based on the list of system calls a container has made.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.seccomp(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get system call from (required)
        :param str starting_time: Date from when to get data
        :param str system_call: Get a systemcall by number
        :param str language: Get calls for a given language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.seccomp_with_http_info(container_id, **kwargs)
        else:
            (data) = self.seccomp_with_http_info(container_id, **kwargs)
            return data

    def seccomp_with_http_info(self, container_id, **kwargs):
        """
        Get a Seccomp profile based on the list of system calls a container has made.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.seccomp_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get system call from (required)
        :param str starting_time: Date from when to get data
        :param str system_call: Get a systemcall by number
        :param str language: Get calls for a given language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'starting_time', 'system_call', 'language']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method seccomp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `seccomp`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []
        if 'starting_time' in params:
            query_params.append(('StartingTime', params['starting_time']))
        if 'system_call' in params:
            query_params.append(('SystemCall', params['system_call']))
        if 'language' in params:
            query_params.append(('Language', params['language']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/Seccomp', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show_container_details(self, container_id, **kwargs):
        """
        Get a container
        Get a container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_container_details(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get (required)
        :return: Container
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_container_details_with_http_info(container_id, **kwargs)
        else:
            (data) = self.show_container_details_with_http_info(container_id, **kwargs)
            return data

    def show_container_details_with_http_info(self, container_id, **kwargs):
        """
        Get a container
        Get a container
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_container_details_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get (required)
        :return: Container
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_container_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `show_container_details`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Container',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def singel_syscall(self, container_id, system_call, **kwargs):
        """
        Get amount of calls to a system call number in the last 5 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.singel_syscall(container_id, system_call, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get metrics from (required)
        :param str system_call: System call number (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.singel_syscall_with_http_info(container_id, system_call, **kwargs)
        else:
            (data) = self.singel_syscall_with_http_info(container_id, system_call, **kwargs)
            return data

    def singel_syscall_with_http_info(self, container_id, system_call, **kwargs):
        """
        Get amount of calls to a system call number in the last 5 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.singel_syscall_with_http_info(container_id, system_call, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of container to get metrics from (required)
        :param str system_call: System call number (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id', 'system_call']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method singel_syscall" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `singel_syscall`")
        # verify the required parameter 'system_call' is set
        if ('system_call' not in params) or (params['system_call'] is None):
            raise ValueError("Missing the required parameter `system_call` when calling `singel_syscall`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []
        if 'system_call' in params:
            query_params.append(('SystemCall', params['system_call']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/SingleSyscall', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='int',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def toggle_container_sniffer(self, container_id, **kwargs):
        """
        Toggles network sniffer
        Toggles network sniffer on/off for specified container. This call doesn't take any parameters beside the container ID - each call of the API toggles the sniffer setting between enabled and disabled. Sniffer in a running container will change status within 30 seconds of this API call.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.toggle_container_sniffer(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of registry to return (required)
        :return: Container
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.toggle_container_sniffer_with_http_info(container_id, **kwargs)
        else:
            (data) = self.toggle_container_sniffer_with_http_info(container_id, **kwargs)
            return data

    def toggle_container_sniffer_with_http_info(self, container_id, **kwargs):
        """
        Toggles network sniffer
        Toggles network sniffer on/off for specified container. This call doesn't take any parameters beside the container ID - each call of the API toggles the sniffer setting between enabled and disabled. Sniffer in a running container will change status within 30 seconds of this API call.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.toggle_container_sniffer_with_http_info(container_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str container_id: hexadecimal ID of registry to return (required)
        :return: Container
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method toggle_container_sniffer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params) or (params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `toggle_container_sniffer`")


        collection_formats = {}

        path_params = {}
        if 'container_id' in params:
            path_params['containerID'] = params['container_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Containers/{containerID}/ToggleSniffer', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Container',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
