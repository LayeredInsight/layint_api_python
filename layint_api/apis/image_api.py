# coding: utf-8

"""
    Layered Insight Assessment, Compliance, Witness & Control

    LI Assessment & Compliance performs static vulnerability analysis, license and package compliance. LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.10
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ImageApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_image(self, **kwargs):
        """
        Create new image definition
        Creates a image object. ID SHOULD NOT be passed when creating a new image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_image(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Image image:
        :param str instrument_image: Set to \"true\" to instrument image at time of API call
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_image_with_http_info(**kwargs)
        else:
            (data) = self.add_image_with_http_info(**kwargs)
            return data

    def add_image_with_http_info(self, **kwargs):
        """
        Create new image definition
        Creates a image object. ID SHOULD NOT be passed when creating a new image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_image_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Image image:
        :param str instrument_image: Set to \"true\" to instrument image at time of API call
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image', 'instrument_image']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_image" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'instrument_image' in params:
            query_params.append(('InstrumentImage', params['instrument_image']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'image' in params:
            body_params = params['image']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Images', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def assign_configuration_to_image(self, image_id, config_id, **kwargs):
        """
        Assign configuration to image
        Assigns the specified configuration to the specified image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_configuration_to_image(image_id, config_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to instrument (required)
        :param str config_id: hexadecimal ID of configuration to assign to image (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.assign_configuration_to_image_with_http_info(image_id, config_id, **kwargs)
        else:
            (data) = self.assign_configuration_to_image_with_http_info(image_id, config_id, **kwargs)
            return data

    def assign_configuration_to_image_with_http_info(self, image_id, config_id, **kwargs):
        """
        Assign configuration to image
        Assigns the specified configuration to the specified image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_configuration_to_image_with_http_info(image_id, config_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to instrument (required)
        :param str config_id: hexadecimal ID of configuration to assign to image (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'config_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_configuration_to_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `assign_configuration_to_image`")
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params) or (params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `assign_configuration_to_image`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']
        if 'config_id' in params:
            path_params['configID'] = params['config_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Images/{imageID}/Configs/{configID}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def assign_policy_to_image(self, image_id, policy_id, **kwargs):
        """
        Assign security policy to image
        Assigns the specified security policy to the specified image. Running containers will update to the new policy within one minute.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_policy_to_image(image_id, policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to instrument (required)
        :param str policy_id: hexadecimal ID of policy to assign to image (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.assign_policy_to_image_with_http_info(image_id, policy_id, **kwargs)
        else:
            (data) = self.assign_policy_to_image_with_http_info(image_id, policy_id, **kwargs)
            return data

    def assign_policy_to_image_with_http_info(self, image_id, policy_id, **kwargs):
        """
        Assign security policy to image
        Assigns the specified security policy to the specified image. Running containers will update to the new policy within one minute.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_policy_to_image_with_http_info(image_id, policy_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to instrument (required)
        :param str policy_id: hexadecimal ID of policy to assign to image (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'policy_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_policy_to_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `assign_policy_to_image`")
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params) or (params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `assign_policy_to_image`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']
        if 'policy_id' in params:
            path_params['policyID'] = params['policy_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Images/{imageID}/Policies/{policyID}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_image(self, image_id, **kwargs):
        """
        Delete specified image
        Deletes the specified image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_image(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_image_with_http_info(image_id, **kwargs)
        else:
            (data) = self.delete_image_with_http_info(image_id, **kwargs)
            return data

    def delete_image_with_http_info(self, image_id, **kwargs):
        """
        Delete specified image
        Deletes the specified image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_image_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `delete_image`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Images/{imageID}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_agent_config(self, image_id, **kwargs):
        """
        Get the specified image configuration for the LI agent. The configuration consists of agent settings and policy rules.
        Provides the compiled LI agent configuration for the specified image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_agent_config(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to get agent configuration (required)
        :param int log_mode: integer in decimal representation containing LogMode bit flags to set in the  generated agent configuration.  | Log Mode        | Value | Value Hexadecimal | |-----------------|-------|-------------------| | None            | 0     | 0x0| | PolicyAlert     | 1     | 0x1| | PolicyDeny      | 2     | 0x2| | PolicyAlertDeny | 3     | 0x3 (PolicyAlert \\| PolicyDeny)| | PolicyAllow     | 4     | 0x4| | PolicyAll       | 7     | 0x7 (PolicyAlert \\| PolicyDeny \\| PolicyAllow)| | Behavior        | 8     | 0x8   | | All             | 15    | 0xf (PolicyAll \\| Behavior)| 
        :param str arch: architecture to use for the generated agent configuration policy rules
        :param bool raw: response format option for raw format
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_agent_config_with_http_info(image_id, **kwargs)
        else:
            (data) = self.get_agent_config_with_http_info(image_id, **kwargs)
            return data

    def get_agent_config_with_http_info(self, image_id, **kwargs):
        """
        Get the specified image configuration for the LI agent. The configuration consists of agent settings and policy rules.
        Provides the compiled LI agent configuration for the specified image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_agent_config_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to get agent configuration (required)
        :param int log_mode: integer in decimal representation containing LogMode bit flags to set in the  generated agent configuration.  | Log Mode        | Value | Value Hexadecimal | |-----------------|-------|-------------------| | None            | 0     | 0x0| | PolicyAlert     | 1     | 0x1| | PolicyDeny      | 2     | 0x2| | PolicyAlertDeny | 3     | 0x3 (PolicyAlert \\| PolicyDeny)| | PolicyAllow     | 4     | 0x4| | PolicyAll       | 7     | 0x7 (PolicyAlert \\| PolicyDeny \\| PolicyAllow)| | Behavior        | 8     | 0x8   | | All             | 15    | 0xf (PolicyAll \\| Behavior)| 
        :param str arch: architecture to use for the generated agent configuration policy rules
        :param bool raw: response format option for raw format
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'log_mode', 'arch', 'raw']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `get_agent_config`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []
        if 'log_mode' in params:
            query_params.append(('logMode', params['log_mode']))
        if 'arch' in params:
            query_params.append(('arch', params['arch']))
        if 'raw' in params:
            query_params.append(('raw', params['raw']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Images/{imageID}/AgentConfig', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_image(self, image_id, **kwargs):
        """
        Get specified container image
        Returns details about specified image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to get (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_image_with_http_info(image_id, **kwargs)
        else:
            (data) = self.get_image_with_http_info(image_id, **kwargs)
            return data

    def get_image_with_http_info(self, image_id, **kwargs):
        """
        Get specified container image
        Returns details about specified image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to get (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `get_image`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Images/{imageID}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_images(self, **kwargs):
        """
        Get defined container images
        Returns a list of defined images that are accessible to this user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_images(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Images
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_images_with_http_info(**kwargs)
        else:
            (data) = self.get_images_with_http_info(**kwargs)
            return data

    def get_images_with_http_info(self, **kwargs):
        """
        Get defined container images
        Returns a list of defined images that are accessible to this user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_images_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Images
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_images" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Images', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Images',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def image_id_level_syscall_category_metrics(self, image_id, starting_time, **kwargs):
        """
        Get histograph information for system calls divided into category groups across all the containers which are using the image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.image_id_level_syscall_category_metrics(image_id, starting_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of container to get metrics from (required)
        :param str starting_time: Time from when histograph should start (required)
        :param str ending_time: Time from when histograph should end
        :return: LevelSyscallCategoryMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.image_id_level_syscall_category_metrics_with_http_info(image_id, starting_time, **kwargs)
        else:
            (data) = self.image_id_level_syscall_category_metrics_with_http_info(image_id, starting_time, **kwargs)
            return data

    def image_id_level_syscall_category_metrics_with_http_info(self, image_id, starting_time, **kwargs):
        """
        Get histograph information for system calls divided into category groups across all the containers which are using the image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.image_id_level_syscall_category_metrics_with_http_info(image_id, starting_time, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of container to get metrics from (required)
        :param str starting_time: Time from when histograph should start (required)
        :param str ending_time: Time from when histograph should end
        :return: LevelSyscallCategoryMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'starting_time', 'ending_time']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method image_id_level_syscall_category_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `image_id_level_syscall_category_metrics`")
        # verify the required parameter 'starting_time' is set
        if ('starting_time' not in params) or (params['starting_time'] is None):
            raise ValueError("Missing the required parameter `starting_time` when calling `image_id_level_syscall_category_metrics`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []
        if 'starting_time' in params:
            query_params.append(('StartingTime', params['starting_time']))
        if 'ending_time' in params:
            query_params.append(('EndingTime', params['ending_time']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Images/{imageID}/LevelSyscallCategoryMetrics', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LevelSyscallCategoryMetrics',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def images_search_post(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.images_search_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.images_search_post_with_http_info(**kwargs)
        else:
            (data) = self.images_search_post_with_http_info(**kwargs)
            return data

    def images_search_post_with_http_info(self, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.images_search_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method images_search_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/ImagesSearch', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def instrument_image(self, image_id, **kwargs):
        """
        Request instrumentation of specified container image
        Lists containers that are running specified image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.instrument_image(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to instrument (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.instrument_image_with_http_info(image_id, **kwargs)
        else:
            (data) = self.instrument_image_with_http_info(image_id, **kwargs)
            return data

    def instrument_image_with_http_info(self, image_id, **kwargs):
        """
        Request instrumentation of specified container image
        Lists containers that are running specified image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.instrument_image_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to instrument (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instrument_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `instrument_image`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Images/{imageID}/Instrument', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def number_of_instrumented_images(self, **kwargs):
        """
        Returns number of instrumented images
        Returns number of instrumented images belonging to a user's group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.number_of_instrumented_images(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.number_of_instrumented_images_with_http_info(**kwargs)
        else:
            (data) = self.number_of_instrumented_images_with_http_info(**kwargs)
            return data

    def number_of_instrumented_images_with_http_info(self, **kwargs):
        """
        Returns number of instrumented images
        Returns number of instrumented images belonging to a user's group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.number_of_instrumented_images_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method number_of_instrumented_images" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/ImagesInstrumented', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show_container_running_image(self, image_id, **kwargs):
        """
        Get specified container image
        Lists containers that are running specified image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_container_running_image(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to get containers for (required)
        :return: Container
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_container_running_image_with_http_info(image_id, **kwargs)
        else:
            (data) = self.show_container_running_image_with_http_info(image_id, **kwargs)
            return data

    def show_container_running_image_with_http_info(self, image_id, **kwargs):
        """
        Get specified container image
        Lists containers that are running specified image.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_container_running_image_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to get containers for (required)
        :return: Container
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_container_running_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `show_container_running_image`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Images/{imageID}/Containers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Container',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_image(self, image_id, **kwargs):
        """
        Update image definition
        Updates an existing image object.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_image(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to get (required)
        :param ImageUpdateRequest image_update_request:
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_image_with_http_info(image_id, **kwargs)
        else:
            (data) = self.update_image_with_http_info(image_id, **kwargs)
            return data

    def update_image_with_http_info(self, image_id, **kwargs):
        """
        Update image definition
        Updates an existing image object.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_image_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: hexadecimal ID of image to get (required)
        :param ImageUpdateRequest image_update_request:
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'image_update_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `update_image`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'image_update_request' in params:
            body_params = params['image_update_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Images/{imageID}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
