# coding: utf-8

"""
    Layered Insight Assessment, Compliance, Witness & Control

    LI Assessment & Compliance performs static vulnerability analysis, license and package compliance. LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.10
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ImagesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_image_tags(self, image_id, tag_i_ds, **kwargs):
        """
        Add tags to image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_image_tags(image_id, tag_i_ds, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: ImageID to tag (required)
        :param TagIDs tag_i_ds: Tag IDs to be applied to image (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_image_tags_with_http_info(image_id, tag_i_ds, **kwargs)
        else:
            (data) = self.add_image_tags_with_http_info(image_id, tag_i_ds, **kwargs)
            return data

    def add_image_tags_with_http_info(self, image_id, tag_i_ds, **kwargs):
        """
        Add tags to image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_image_tags_with_http_info(image_id, tag_i_ds, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: ImageID to tag (required)
        :param TagIDs tag_i_ds: Tag IDs to be applied to image (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'tag_i_ds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_image_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `add_image_tags`")
        # verify the required parameter 'tag_i_ds' is set
        if ('tag_i_ds' not in params) or (params['tag_i_ds'] is None):
            raise ValueError("Missing the required parameter `tag_i_ds` when calling `add_image_tags`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tag_i_ds' in params:
            body_params = params['tag_i_ds']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Scan/Images/{imageID}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_image_compliance(self, image_id, **kwargs):
        """
        Get compliance report for specified image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_compliance(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: ImageID to get compliance data for (required)
        :param bool run: If true, requests running compliance policies specified in \"policies\" parameter
        :param str policies: Comma-separated list of compliance policies to run for this image
        :return: Compliances
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_image_compliance_with_http_info(image_id, **kwargs)
        else:
            (data) = self.get_image_compliance_with_http_info(image_id, **kwargs)
            return data

    def get_image_compliance_with_http_info(self, image_id, **kwargs):
        """
        Get compliance report for specified image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_compliance_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: ImageID to get compliance data for (required)
        :param bool run: If true, requests running compliance policies specified in \"policies\" parameter
        :param str policies: Comma-separated list of compliance policies to run for this image
        :return: Compliances
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'run', 'policies']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_compliance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `get_image_compliance`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []
        if 'run' in params:
            query_params.append(('run', params['run']))
        if 'policies' in params:
            query_params.append(('policies', params['policies']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Scan/Images/{imageID}/Compliance', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Compliances',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_image_licenses(self, image_id, **kwargs):
        """
        Find software licenses for the components making up the image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_licenses(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: (required)
        :return: list[InlineResponse2001]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_image_licenses_with_http_info(image_id, **kwargs)
        else:
            (data) = self.get_image_licenses_with_http_info(image_id, **kwargs)
            return data

    def get_image_licenses_with_http_info(self, image_id, **kwargs):
        """
        Find software licenses for the components making up the image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_licenses_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: (required)
        :return: list[InlineResponse2001]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_licenses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `get_image_licenses`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Scan/Images/{imageID}/Licenses', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2001]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_image_log(self, image_id, log_id, **kwargs):
        """
        Get a log for an image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_log(image_id, log_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: (required)
        :param str log_id: (required)
        :return: ImageLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_image_log_with_http_info(image_id, log_id, **kwargs)
        else:
            (data) = self.get_image_log_with_http_info(image_id, log_id, **kwargs)
            return data

    def get_image_log_with_http_info(self, image_id, log_id, **kwargs):
        """
        Get a log for an image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_log_with_http_info(image_id, log_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: (required)
        :param str log_id: (required)
        :return: ImageLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'log_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `get_image_log`")
        # verify the required parameter 'log_id' is set
        if ('log_id' not in params) or (params['log_id'] is None):
            raise ValueError("Missing the required parameter `log_id` when calling `get_image_log`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']
        if 'log_id' in params:
            path_params['logID'] = params['log_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Scan/Images/{imageID}/Logs/{logID}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ImageLog',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_image_logs(self, image_id, **kwargs):
        """
        Get logs for an image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_logs(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: (required)
        :return: ImageLogs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_image_logs_with_http_info(image_id, **kwargs)
        else:
            (data) = self.get_image_logs_with_http_info(image_id, **kwargs)
            return data

    def get_image_logs_with_http_info(self, image_id, **kwargs):
        """
        Get logs for an image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_logs_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: (required)
        :return: ImageLogs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `get_image_logs`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Scan/Images/{imageID}/Logs', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ImageLogs',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_image_scan(self, image_id, scan_id, **kwargs):
        """
        Get scan data for specific scan for specified image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_scan(image_id, scan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: ImageID to get scan data for (required)
        :param str scan_id: ID of scan to get data for (required)
        :return: ScanData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_image_scan_with_http_info(image_id, scan_id, **kwargs)
        else:
            (data) = self.get_image_scan_with_http_info(image_id, scan_id, **kwargs)
            return data

    def get_image_scan_with_http_info(self, image_id, scan_id, **kwargs):
        """
        Get scan data for specific scan for specified image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_scan_with_http_info(image_id, scan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: ImageID to get scan data for (required)
        :param str scan_id: ID of scan to get data for (required)
        :return: ScanData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'scan_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_scan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `get_image_scan`")
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in params) or (params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `get_image_scan`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']
        if 'scan_id' in params:
            path_params['scanID'] = params['scan_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Scan/Images/{imageID}/Scans/{scanID}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ScanData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_image_scans(self, image_id, **kwargs):
        """
        Get all scan data for specified image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_scans(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: ImageID to get scan data for (required)
        :return: ScanDatas
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_image_scans_with_http_info(image_id, **kwargs)
        else:
            (data) = self.get_image_scans_with_http_info(image_id, **kwargs)
            return data

    def get_image_scans_with_http_info(self, image_id, **kwargs):
        """
        Get all scan data for specified image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_image_scans_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: ImageID to get scan data for (required)
        :return: ScanDatas
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_scans" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `get_image_scans`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Scan/Images/{imageID}/Scans', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ScanDatas',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def image_compliance_history_get2(self, image_id, starting_date, ending_date, **kwargs):
        """
        Get compliance history for specified image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.image_compliance_history_get2(image_id, starting_date, ending_date, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: ImageID to get compliance data for (required)
        :param str starting_date: Start date for period of interest (required)
        :param str ending_date: End date for period of interest (required)
        :return: ComplianceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.image_compliance_history_get2_with_http_info(image_id, starting_date, ending_date, **kwargs)
        else:
            (data) = self.image_compliance_history_get2_with_http_info(image_id, starting_date, ending_date, **kwargs)
            return data

    def image_compliance_history_get2_with_http_info(self, image_id, starting_date, ending_date, **kwargs):
        """
        Get compliance history for specified image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.image_compliance_history_get2_with_http_info(image_id, starting_date, ending_date, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: ImageID to get compliance data for (required)
        :param str starting_date: Start date for period of interest (required)
        :param str ending_date: End date for period of interest (required)
        :return: ComplianceHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'starting_date', 'ending_date']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method image_compliance_history_get2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `image_compliance_history_get2`")
        # verify the required parameter 'starting_date' is set
        if ('starting_date' not in params) or (params['starting_date'] is None):
            raise ValueError("Missing the required parameter `starting_date` when calling `image_compliance_history_get2`")
        # verify the required parameter 'ending_date' is set
        if ('ending_date' not in params) or (params['ending_date'] is None):
            raise ValueError("Missing the required parameter `ending_date` when calling `image_compliance_history_get2`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']
        if 'starting_date' in params:
            path_params['StartingDate'] = params['starting_date']
        if 'ending_date' in params:
            path_params['EndingDate'] = params['ending_date']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Scan/Images/{imageID}/ComplianceHistory', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ComplianceHistory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def is_image_compliant(self, image_id, **kwargs):
        """
        Determines if specified image is in compliance with policies applied to image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.is_image_compliant(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: ImageID to check compliance of (required)
        :return: ComplianceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.is_image_compliant_with_http_info(image_id, **kwargs)
        else:
            (data) = self.is_image_compliant_with_http_info(image_id, **kwargs)
            return data

    def is_image_compliant_with_http_info(self, image_id, **kwargs):
        """
        Determines if specified image is in compliance with policies applied to image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.is_image_compliant_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id: ImageID to check compliance of (required)
        :return: ComplianceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method is_image_compliant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `is_image_compliant`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageID'] = params['image_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKey']

        return self.api_client.call_api('/Scan/Images/{imageID}/IsCompliant', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ComplianceResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
