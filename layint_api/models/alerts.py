# coding: utf-8

"""
    Layered Insight Assessment, Compliance, Witness & Control

    LI Assessment & Compliance performs static vulnerability analysis, license and package compliance. LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.10
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Alerts(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new': 'int',
        'total': 'int',
        'messages': 'AlertsMessages'
    }

    attribute_map = {
        'new': 'New',
        'total': 'Total',
        'messages': 'Messages'
    }

    def __init__(self, new=None, total=None, messages=None):
        """
        Alerts - a model defined in Swagger
        """

        self._new = None
        self._total = None
        self._messages = None

        if new is not None:
          self.new = new
        if total is not None:
          self.total = total
        if messages is not None:
          self.messages = messages

    @property
    def new(self):
        """
        Gets the new of this Alerts.

        :return: The new of this Alerts.
        :rtype: int
        """
        return self._new

    @new.setter
    def new(self, new):
        """
        Sets the new of this Alerts.

        :param new: The new of this Alerts.
        :type: int
        """

        self._new = new

    @property
    def total(self):
        """
        Gets the total of this Alerts.

        :return: The total of this Alerts.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this Alerts.

        :param total: The total of this Alerts.
        :type: int
        """

        self._total = total

    @property
    def messages(self):
        """
        Gets the messages of this Alerts.

        :return: The messages of this Alerts.
        :rtype: AlertsMessages
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """
        Sets the messages of this Alerts.

        :param messages: The messages of this Alerts.
        :type: AlertsMessages
        """

        self._messages = messages

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Alerts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
