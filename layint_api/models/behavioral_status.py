# coding: utf-8

"""
    Layered Insight Assessment, Compliance, Witness & Control

    LI Assessment & Compliance performs static vulnerability analysis, license and package compliance. LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.10
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BehavioralStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'policy_id': 'str',
        'behavioral': 'bool'
    }

    attribute_map = {
        'id': 'ID',
        'policy_id': 'PolicyID',
        'behavioral': 'Behavioral'
    }

    def __init__(self, id=None, policy_id=None, behavioral=None):
        """
        BehavioralStatus - a model defined in Swagger
        """

        self._id = None
        self._policy_id = None
        self._behavioral = None

        if id is not None:
          self.id = id
        if policy_id is not None:
          self.policy_id = policy_id
        if behavioral is not None:
          self.behavioral = behavioral

    @property
    def id(self):
        """
        Gets the id of this BehavioralStatus.
        Container ID

        :return: The id of this BehavioralStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BehavioralStatus.
        Container ID

        :param id: The id of this BehavioralStatus.
        :type: str
        """

        self._id = id

    @property
    def policy_id(self):
        """
        Gets the policy_id of this BehavioralStatus.
        Policy ID

        :return: The policy_id of this BehavioralStatus.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """
        Sets the policy_id of this BehavioralStatus.
        Policy ID

        :param policy_id: The policy_id of this BehavioralStatus.
        :type: str
        """

        self._policy_id = policy_id

    @property
    def behavioral(self):
        """
        Gets the behavioral of this BehavioralStatus.
        Behavioral logging on status

        :return: The behavioral of this BehavioralStatus.
        :rtype: bool
        """
        return self._behavioral

    @behavioral.setter
    def behavioral(self, behavioral):
        """
        Sets the behavioral of this BehavioralStatus.
        Behavioral logging on status

        :param behavioral: The behavioral of this BehavioralStatus.
        :type: bool
        """

        self._behavioral = behavioral

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BehavioralStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
