# coding: utf-8

"""
    Layered Insight Assessment, Compliance, Witness & Control

    LI Assessment & Compliance performs static vulnerability analysis, license and package compliance. LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.10
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DroppedLogsOfContainerInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'event_i_ds': 'list[str]',
        'alert_description': 'list[str]',
        'events': 'int'
    }

    attribute_map = {
        'id': 'ID',
        'event_i_ds': 'EventIDs',
        'alert_description': 'AlertDescription',
        'events': 'Events'
    }

    def __init__(self, id=None, event_i_ds=None, alert_description=None, events=None):
        """
        DroppedLogsOfContainerInner - a model defined in Swagger
        """

        self._id = None
        self._event_i_ds = None
        self._alert_description = None
        self._events = None

        if id is not None:
          self.id = id
        if event_i_ds is not None:
          self.event_i_ds = event_i_ds
        if alert_description is not None:
          self.alert_description = alert_description
        if events is not None:
          self.events = events

    @property
    def id(self):
        """
        Gets the id of this DroppedLogsOfContainerInner.
        id

        :return: The id of this DroppedLogsOfContainerInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DroppedLogsOfContainerInner.
        id

        :param id: The id of this DroppedLogsOfContainerInner.
        :type: int
        """

        self._id = id

    @property
    def event_i_ds(self):
        """
        Gets the event_i_ds of this DroppedLogsOfContainerInner.
        objectId array

        :return: The event_i_ds of this DroppedLogsOfContainerInner.
        :rtype: list[str]
        """
        return self._event_i_ds

    @event_i_ds.setter
    def event_i_ds(self, event_i_ds):
        """
        Sets the event_i_ds of this DroppedLogsOfContainerInner.
        objectId array

        :param event_i_ds: The event_i_ds of this DroppedLogsOfContainerInner.
        :type: list[str]
        """

        self._event_i_ds = event_i_ds

    @property
    def alert_description(self):
        """
        Gets the alert_description of this DroppedLogsOfContainerInner.
        description of the alert

        :return: The alert_description of this DroppedLogsOfContainerInner.
        :rtype: list[str]
        """
        return self._alert_description

    @alert_description.setter
    def alert_description(self, alert_description):
        """
        Sets the alert_description of this DroppedLogsOfContainerInner.
        description of the alert

        :param alert_description: The alert_description of this DroppedLogsOfContainerInner.
        :type: list[str]
        """

        self._alert_description = alert_description

    @property
    def events(self):
        """
        Gets the events of this DroppedLogsOfContainerInner.

        :return: The events of this DroppedLogsOfContainerInner.
        :rtype: int
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this DroppedLogsOfContainerInner.

        :param events: The events of this DroppedLogsOfContainerInner.
        :type: int
        """

        self._events = events

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DroppedLogsOfContainerInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
