# coding: utf-8

"""
    Layered Insight Assessment, Compliance, Witness & Control

    LI Assessment & Compliance performs static vulnerability analysis, license and package compliance. LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.10
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Group(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'parent_id': 'int',
        'roles_i_ds': 'list[str]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'parent_id': 'ParentId',
        'roles_i_ds': 'RolesIDs'
    }

    def __init__(self, id=None, name=None, parent_id=None, roles_i_ds=None):
        """
        Group - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._parent_id = None
        self._roles_i_ds = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if parent_id is not None:
          self.parent_id = parent_id
        if roles_i_ds is not None:
          self.roles_i_ds = roles_i_ds

    @property
    def id(self):
        """
        Gets the id of this Group.
        BsonObjectID string unique to Group

        :return: The id of this Group.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Group.
        BsonObjectID string unique to Group

        :param id: The id of this Group.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Group.
        Name of the Group

        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Group.
        Name of the Group

        :param name: The name of this Group.
        :type: str
        """

        self._name = name

    @property
    def parent_id(self):
        """
        Gets the parent_id of this Group.
        ParentId of the Group

        :return: The parent_id of this Group.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this Group.
        ParentId of the Group

        :param parent_id: The parent_id of this Group.
        :type: int
        """

        self._parent_id = parent_id

    @property
    def roles_i_ds(self):
        """
        Gets the roles_i_ds of this Group.
        All roles assigned to the User

        :return: The roles_i_ds of this Group.
        :rtype: list[str]
        """
        return self._roles_i_ds

    @roles_i_ds.setter
    def roles_i_ds(self, roles_i_ds):
        """
        Sets the roles_i_ds of this Group.
        All roles assigned to the User

        :param roles_i_ds: The roles_i_ds of this Group.
        :type: list[str]
        """

        self._roles_i_ds = roles_i_ds

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
