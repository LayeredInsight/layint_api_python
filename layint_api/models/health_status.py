# coding: utf-8

"""
    Layered Insight Assessment, Compliance, Witness & Control

    LI Assessment & Compliance performs static vulnerability analysis, license and package compliance. LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.10
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HealthStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'db_available': 'bool',
        'db_migration': 'bool',
        'mq_available': 'bool',
        'error': 'list[str]',
        'log': 'list[str]',
        'warning': 'list[str]'
    }

    attribute_map = {
        'db_available': 'DBAvailable',
        'db_migration': 'DBMigration',
        'mq_available': 'MQAvailable',
        'error': 'Error',
        'log': 'Log',
        'warning': 'Warning'
    }

    def __init__(self, db_available=None, db_migration=None, mq_available=None, error=None, log=None, warning=None):
        """
        HealthStatus - a model defined in Swagger
        """

        self._db_available = None
        self._db_migration = None
        self._mq_available = None
        self._error = None
        self._log = None
        self._warning = None

        if db_available is not None:
          self.db_available = db_available
        if db_migration is not None:
          self.db_migration = db_migration
        if mq_available is not None:
          self.mq_available = mq_available
        if error is not None:
          self.error = error
        if log is not None:
          self.log = log
        if warning is not None:
          self.warning = warning

    @property
    def db_available(self):
        """
        Gets the db_available of this HealthStatus.

        :return: The db_available of this HealthStatus.
        :rtype: bool
        """
        return self._db_available

    @db_available.setter
    def db_available(self, db_available):
        """
        Sets the db_available of this HealthStatus.

        :param db_available: The db_available of this HealthStatus.
        :type: bool
        """

        self._db_available = db_available

    @property
    def db_migration(self):
        """
        Gets the db_migration of this HealthStatus.

        :return: The db_migration of this HealthStatus.
        :rtype: bool
        """
        return self._db_migration

    @db_migration.setter
    def db_migration(self, db_migration):
        """
        Sets the db_migration of this HealthStatus.

        :param db_migration: The db_migration of this HealthStatus.
        :type: bool
        """

        self._db_migration = db_migration

    @property
    def mq_available(self):
        """
        Gets the mq_available of this HealthStatus.

        :return: The mq_available of this HealthStatus.
        :rtype: bool
        """
        return self._mq_available

    @mq_available.setter
    def mq_available(self, mq_available):
        """
        Sets the mq_available of this HealthStatus.

        :param mq_available: The mq_available of this HealthStatus.
        :type: bool
        """

        self._mq_available = mq_available

    @property
    def error(self):
        """
        Gets the error of this HealthStatus.

        :return: The error of this HealthStatus.
        :rtype: list[str]
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this HealthStatus.

        :param error: The error of this HealthStatus.
        :type: list[str]
        """

        self._error = error

    @property
    def log(self):
        """
        Gets the log of this HealthStatus.

        :return: The log of this HealthStatus.
        :rtype: list[str]
        """
        return self._log

    @log.setter
    def log(self, log):
        """
        Sets the log of this HealthStatus.

        :param log: The log of this HealthStatus.
        :type: list[str]
        """

        self._log = log

    @property
    def warning(self):
        """
        Gets the warning of this HealthStatus.

        :return: The warning of this HealthStatus.
        :rtype: list[str]
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """
        Sets the warning of this HealthStatus.

        :param warning: The warning of this HealthStatus.
        :type: list[str]
        """

        self._warning = warning

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HealthStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
