# coding: utf-8

"""
    Layered Insight Assessment, Compliance, Witness & Control

    LI Assessment & Compliance performs static vulnerability analysis, license and package compliance. LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.10
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ImageUpdateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'push_registry': 'str',
        'push_name': 'str',
        'config_id': 'str',
        'policy_id': 'str',
        'tags': 'list[Tag]'
    }

    attribute_map = {
        'id': 'ID',
        'push_registry': 'PushRegistry',
        'push_name': 'PushName',
        'config_id': 'ConfigID',
        'policy_id': 'PolicyID',
        'tags': 'Tags'
    }

    def __init__(self, id=None, push_registry=None, push_name=None, config_id=None, policy_id=None, tags=None):
        """
        ImageUpdateRequest - a model defined in Swagger
        """

        self._id = None
        self._push_registry = None
        self._push_name = None
        self._config_id = None
        self._policy_id = None
        self._tags = None

        if id is not None:
          self.id = id
        if push_registry is not None:
          self.push_registry = push_registry
        if push_name is not None:
          self.push_name = push_name
        if config_id is not None:
          self.config_id = config_id
        if policy_id is not None:
          self.policy_id = policy_id
        if tags is not None:
          self.tags = tags

    @property
    def id(self):
        """
        Gets the id of this ImageUpdateRequest.
        12 character internal hexadecimal identifier for the image to update

        :return: The id of this ImageUpdateRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ImageUpdateRequest.
        12 character internal hexadecimal identifier for the image to update

        :param id: The id of this ImageUpdateRequest.
        :type: str
        """

        self._id = id

    @property
    def push_registry(self):
        """
        Gets the push_registry of this ImageUpdateRequest.
        12 character hexadecimal internal identifier to layered insight record defining the push registry for a layered version of this image

        :return: The push_registry of this ImageUpdateRequest.
        :rtype: str
        """
        return self._push_registry

    @push_registry.setter
    def push_registry(self, push_registry):
        """
        Sets the push_registry of this ImageUpdateRequest.
        12 character hexadecimal internal identifier to layered insight record defining the push registry for a layered version of this image

        :param push_registry: The push_registry of this ImageUpdateRequest.
        :type: str
        """

        self._push_registry = push_registry

    @property
    def push_name(self):
        """
        Gets the push_name of this ImageUpdateRequest.
        Layered Image name for push registry (-layered tag will still be appended)

        :return: The push_name of this ImageUpdateRequest.
        :rtype: str
        """
        return self._push_name

    @push_name.setter
    def push_name(self, push_name):
        """
        Sets the push_name of this ImageUpdateRequest.
        Layered Image name for push registry (-layered tag will still be appended)

        :param push_name: The push_name of this ImageUpdateRequest.
        :type: str
        """

        self._push_name = push_name

    @property
    def config_id(self):
        """
        Gets the config_id of this ImageUpdateRequest.
        12 character hexadecimal internal identifier for Runtime configuration for this Container

        :return: The config_id of this ImageUpdateRequest.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """
        Sets the config_id of this ImageUpdateRequest.
        12 character hexadecimal internal identifier for Runtime configuration for this Container

        :param config_id: The config_id of this ImageUpdateRequest.
        :type: str
        """

        self._config_id = config_id

    @property
    def policy_id(self):
        """
        Gets the policy_id of this ImageUpdateRequest.
        Future enhancement. 12 character hexadecimal internal identifier  for the start up security policy built into the image during  instrumentation. This policy can be disabled with the Policy.Suspend  flag. The image runtime Configuration.PolicyID specifies the security  policy delivered once the Container LI agent establishes communication. 

        :return: The policy_id of this ImageUpdateRequest.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """
        Sets the policy_id of this ImageUpdateRequest.
        Future enhancement. 12 character hexadecimal internal identifier  for the start up security policy built into the image during  instrumentation. This policy can be disabled with the Policy.Suspend  flag. The image runtime Configuration.PolicyID specifies the security  policy delivered once the Container LI agent establishes communication. 

        :param policy_id: The policy_id of this ImageUpdateRequest.
        :type: str
        """

        self._policy_id = policy_id

    @property
    def tags(self):
        """
        Gets the tags of this ImageUpdateRequest.

        :return: The tags of this ImageUpdateRequest.
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ImageUpdateRequest.

        :param tags: The tags of this ImageUpdateRequest.
        :type: list[Tag]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ImageUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
