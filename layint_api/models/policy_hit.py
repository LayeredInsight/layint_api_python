# coding: utf-8

"""
    Layered Insight Assessment, Compliance, Witness & Control

    LI Assessment & Compliance performs static vulnerability analysis, license and package compliance. LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.10
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PolicyHit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location': 'str',
        'application': 'str',
        'container_id': 'str',
        'image_id': 'str',
        'logs': 'list[ContainerLog]'
    }

    attribute_map = {
        'location': 'Location',
        'application': 'Application',
        'container_id': 'ContainerID',
        'image_id': 'ImageID',
        'logs': 'Logs'
    }

    def __init__(self, location=None, application=None, container_id=None, image_id=None, logs=None):
        """
        PolicyHit - a model defined in Swagger
        """

        self._location = None
        self._application = None
        self._container_id = None
        self._image_id = None
        self._logs = None

        if location is not None:
          self.location = location
        if application is not None:
          self.application = application
        if container_id is not None:
          self.container_id = container_id
        if image_id is not None:
          self.image_id = image_id
        if logs is not None:
          self.logs = logs

    @property
    def location(self):
        """
        Gets the location of this PolicyHit.
        Location of running container

        :return: The location of this PolicyHit.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this PolicyHit.
        Location of running container

        :param location: The location of this PolicyHit.
        :type: str
        """

        self._location = location

    @property
    def application(self):
        """
        Gets the application of this PolicyHit.
        Application name of running container

        :return: The application of this PolicyHit.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """
        Sets the application of this PolicyHit.
        Application name of running container

        :param application: The application of this PolicyHit.
        :type: str
        """

        self._application = application

    @property
    def container_id(self):
        """
        Gets the container_id of this PolicyHit.
        ID of running container

        :return: The container_id of this PolicyHit.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """
        Sets the container_id of this PolicyHit.
        ID of running container

        :param container_id: The container_id of this PolicyHit.
        :type: str
        """

        self._container_id = container_id

    @property
    def image_id(self):
        """
        Gets the image_id of this PolicyHit.
        ID of image used to run container

        :return: The image_id of this PolicyHit.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """
        Sets the image_id of this PolicyHit.
        ID of image used to run container

        :param image_id: The image_id of this PolicyHit.
        :type: str
        """

        self._image_id = image_id

    @property
    def logs(self):
        """
        Gets the logs of this PolicyHit.
        Container logs

        :return: The logs of this PolicyHit.
        :rtype: list[ContainerLog]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """
        Sets the logs of this PolicyHit.
        Container logs

        :param logs: The logs of this PolicyHit.
        :type: list[ContainerLog]
        """

        self._logs = logs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PolicyHit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
