# coding: utf-8

"""
    Layered Insight Assessment, Compliance, Witness & Control

    LI Assessment & Compliance performs static vulnerability analysis, license and package compliance. LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.10
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ScanPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'group_id': 'str',
        'uri': 'str',
        'date_created': 'str',
        'date_updated': 'str',
        'name': 'str',
        'rules_id': 'list[str]',
        'rules': 'list[ScanPolicyRule]'
    }

    attribute_map = {
        'id': 'ID',
        'user_id': 'UserID',
        'group_id': 'GroupID',
        'uri': 'URI',
        'date_created': 'DateCreated',
        'date_updated': 'DateUpdated',
        'name': 'Name',
        'rules_id': 'RulesId',
        'rules': 'Rules'
    }

    def __init__(self, id=None, user_id=None, group_id=None, uri=None, date_created=None, date_updated=None, name=None, rules_id=None, rules=None):
        """
        ScanPolicy - a model defined in Swagger
        """

        self._id = None
        self._user_id = None
        self._group_id = None
        self._uri = None
        self._date_created = None
        self._date_updated = None
        self._name = None
        self._rules_id = None
        self._rules = None

        if id is not None:
          self.id = id
        if user_id is not None:
          self.user_id = user_id
        if group_id is not None:
          self.group_id = group_id
        if uri is not None:
          self.uri = uri
        if date_created is not None:
          self.date_created = date_created
        if date_updated is not None:
          self.date_updated = date_updated
        if name is not None:
          self.name = name
        if rules_id is not None:
          self.rules_id = rules_id
        if rules is not None:
          self.rules = rules

    @property
    def id(self):
        """
        Gets the id of this ScanPolicy.
        ID for this rule

        :return: The id of this ScanPolicy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ScanPolicy.
        ID for this rule

        :param id: The id of this ScanPolicy.
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """
        Gets the user_id of this ScanPolicy.
        ID of owner of this rule

        :return: The user_id of this ScanPolicy.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ScanPolicy.
        ID of owner of this rule

        :param user_id: The user_id of this ScanPolicy.
        :type: str
        """

        self._user_id = user_id

    @property
    def group_id(self):
        """
        Gets the group_id of this ScanPolicy.
        Group ID of owner of this rule

        :return: The group_id of this ScanPolicy.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this ScanPolicy.
        Group ID of owner of this rule

        :param group_id: The group_id of this ScanPolicy.
        :type: str
        """

        self._group_id = group_id

    @property
    def uri(self):
        """
        Gets the uri of this ScanPolicy.

        :return: The uri of this ScanPolicy.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this ScanPolicy.

        :param uri: The uri of this ScanPolicy.
        :type: str
        """

        self._uri = uri

    @property
    def date_created(self):
        """
        Gets the date_created of this ScanPolicy.
        Timestamp representing date scan was run

        :return: The date_created of this ScanPolicy.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this ScanPolicy.
        Timestamp representing date scan was run

        :param date_created: The date_created of this ScanPolicy.
        :type: str
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """
        Gets the date_updated of this ScanPolicy.
        Timestamp representing date this record was updated

        :return: The date_updated of this ScanPolicy.
        :rtype: str
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """
        Sets the date_updated of this ScanPolicy.
        Timestamp representing date this record was updated

        :param date_updated: The date_updated of this ScanPolicy.
        :type: str
        """

        self._date_updated = date_updated

    @property
    def name(self):
        """
        Gets the name of this ScanPolicy.
        Name of this policy

        :return: The name of this ScanPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ScanPolicy.
        Name of this policy

        :param name: The name of this ScanPolicy.
        :type: str
        """

        self._name = name

    @property
    def rules_id(self):
        """
        Gets the rules_id of this ScanPolicy.
        List of IDs of the rules in this policy

        :return: The rules_id of this ScanPolicy.
        :rtype: list[str]
        """
        return self._rules_id

    @rules_id.setter
    def rules_id(self, rules_id):
        """
        Sets the rules_id of this ScanPolicy.
        List of IDs of the rules in this policy

        :param rules_id: The rules_id of this ScanPolicy.
        :type: list[str]
        """

        self._rules_id = rules_id

    @property
    def rules(self):
        """
        Gets the rules of this ScanPolicy.

        :return: The rules of this ScanPolicy.
        :rtype: list[ScanPolicyRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """
        Sets the rules of this ScanPolicy.

        :param rules: The rules of this ScanPolicy.
        :type: list[ScanPolicyRule]
        """

        self._rules = rules

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ScanPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
