# coding: utf-8

"""
    Layered Insight Assessment, Compliance, Witness & Control

    LI Assessment & Compliance performs static vulnerability analysis, license and package compliance. LI Witness provides deep insight and analytics into containerized applications. Control provides dynamic runtime security and analytics for containerized applications. You can find out more about the Layered Insight Suite at [http://layeredinsight.com](http://layeredinsight.com).

    OpenAPI spec version: 0.10
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TotStats(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'cpu': 'float',
        'mem': 'float',
        'timestamp': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'cpu': 'Cpu',
        'mem': 'Mem',
        'timestamp': 'Timestamp'
    }

    def __init__(self, id=None, cpu=None, mem=None, timestamp=None):
        """
        TotStats - a model defined in Swagger
        """

        self._id = None
        self._cpu = None
        self._mem = None
        self._timestamp = None

        if id is not None:
          self.id = id
        if cpu is not None:
          self.cpu = cpu
        if mem is not None:
          self.mem = mem
        if timestamp is not None:
          self.timestamp = timestamp

    @property
    def id(self):
        """
        Gets the id of this TotStats.
        Container ID

        :return: The id of this TotStats.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TotStats.
        Container ID

        :param id: The id of this TotStats.
        :type: str
        """

        self._id = id

    @property
    def cpu(self):
        """
        Gets the cpu of this TotStats.
        Percentage CPU utilization

        :return: The cpu of this TotStats.
        :rtype: float
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this TotStats.
        Percentage CPU utilization

        :param cpu: The cpu of this TotStats.
        :type: float
        """

        self._cpu = cpu

    @property
    def mem(self):
        """
        Gets the mem of this TotStats.
        Percentage memory utilization

        :return: The mem of this TotStats.
        :rtype: float
        """
        return self._mem

    @mem.setter
    def mem(self, mem):
        """
        Sets the mem of this TotStats.
        Percentage memory utilization

        :param mem: The mem of this TotStats.
        :type: float
        """

        self._mem = mem

    @property
    def timestamp(self):
        """
        Gets the timestamp of this TotStats.
        Time when measured

        :return: The timestamp of this TotStats.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this TotStats.
        Time when measured

        :param timestamp: The timestamp of this TotStats.
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TotStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
